package net.jhl.control.RateCode
{
	import mx.core.UIComponent;
	
	import net.jhl.view.RateCode.BaseRateMediator;
	import net.jhl.view.RateCode.BaseRateView;
	import net.jwt.event.NotificationArguments;
	import net.jwt.view.MainView;
	import net.jwt.view.popup.JWTPopUpCanvas;
	
	import org.puremvc.as3.interfaces.INotification;
	import org.puremvc.as3.patterns.command.SimpleCommand;
	
	public class BaseRateCommand extends SimpleCommand
	{
		private var _mediator:BaseRateMediator;
		private var _view:BaseRateView;
		private var _args:UIComponent;
//		
//		override public function execute(notification:INotification):void
//		{
//			var args:NotificationArguments = notification.getBody() as NotificationArguments;
//			
//			if (null != args){
//				var app:MainView 		= args.viewComponent as MainView;
//				var view:BaseRateView  	= new BaseRateView;
//				//When mediator is assigned, it start setting up the view and mediator in Meditor.as
//				var mediator:BaseRateMediator 	= new BaseRateMediator(view,args);
//			
//				this._mediator = mediator;
//				this._args     = args as UIComponent;
//				this._view     = view;
//				
//				facade.registerMediator(mediator);
//				app.applicationPanel.removeAllChildren();
//				app.applicationPanel.addChild(view);
//			}
//		}
//		
		override public function execute(notification:INotification):void
		{
			var args:NotificationArguments = notification.getBody() as NotificationArguments;
			var app:Object;
			var view:BaseRateView  			= new BaseRateView;
			var mediator:BaseRateMediator 	= new BaseRateMediator(view,args);
			
			this._mediator = mediator;
			this._args     = args as UIComponent;
			this._view     = view;
			
			facade.registerMediator(mediator);
					
				if((args.viewComponent as MainView) != null)
				{
					app	= args.viewComponent as MainView;
					app.applicationPanel.removeAllChildren();
					app.applicationPanel.addChild(view);
				}
				else if((args.viewComponent as JWTPopUpCanvas) != null)
				{
					app	= args.viewComponent as JWTPopUpCanvas;
					app.canvas_body.removeAllChildren();
					app.canvas_body.addChild(view);
				}
		}
		
		public function BaseRateCommand():void
		{
			//Alert.show("DailyGraphPriceBasedMediator command");
		}
	}
}