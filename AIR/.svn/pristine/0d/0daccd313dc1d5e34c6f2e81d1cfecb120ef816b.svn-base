/****************************************************************
 * Change log													*
 * Created by Upul Gunasinghe									*	
 * Date: 2012/02/15												*
 *--------------------------------------------------------------*  
 * By	Date		Change										*	
 *--------------------------------------------------------------*  
 * UG	2012/02/15	Designed the dynamic hotel rate mechanisum  *			
 * NF	2012/03/17	Created DAO									*
 * UG	2012/04/03	Update rates fetching mechanisum			* 
 ****************************************************************/
 
package net.jwt.view.helper.tourHelper
{
	import flash.events.KeyboardEvent;
	
	import mx.collections.ArrayCollection;
	import mx.containers.HBox;
	import mx.containers.VBox;
	import mx.controls.Alert;
	import mx.controls.DateField;
	import mx.controls.Label;
	import mx.controls.TextInput;
	import mx.core.UIComponent;
	import mx.events.CloseEvent;
	import mx.events.ListEvent;
	import mx.rpc.events.FaultEvent;
	import mx.rpc.events.ResultEvent;
	import mx.rpc.remoting.mxml.RemoteObject;
	import mx.utils.UIDUtil;
	
	import net.jwt.Constants;
	import net.jwt.event.INotificationArguments;
	import net.jwt.event.NotificationArguments;
	import net.jwt.value.objects.Basis;
	import net.jwt.value.objects.CostingHotelDetails;
	import net.jwt.value.objects.DynamicHotel;
	import net.jwt.value.objects.Hotel;
	import net.jwt.value.objects.HotelCancelation;
	import net.jwt.value.objects.HotelPayment;
	import net.jwt.value.objects.HotelRateCategory;
	import net.jwt.value.objects.HotelRates;
	import net.jwt.value.objects.HotelRatesIdentity;
	import net.jwt.value.objects.OccupencyType;
	import net.jwt.value.objects.RoomCategoriesOfHotel;
	import net.jwt.value.objects.RoomCategory;
	import net.jwt.value.objects.User;
	import net.jwt.view.Mediator;
	import net.jwt.view.popup.JWTPopUp;
	
	public class TourHelperHotelMediator extends Mediator
	{
		private var _view:TourHelperHotelView
		private var _args:INotificationArguments;
		public  var asService:RemoteObject;
		private var _loginUser:User;
		[Bindable]
		public var _agents:ArrayCollection;
		
		[Bindable]
		public var _user:ArrayCollection;
		
		[Bindable]
		public var dynamicHotel:DynamicHotel;
		
		private var roomRate:TextInput;
		
		private var hotel_h1:Hotel;
		private var hotel_h2:Hotel;
		
		private const RATESONMARKET:String 				= "RATES_BASED_ON_MARKET";
		
		private var hotelRate:HotelRates;
		private var hotelCancelation:HotelCancelation;
		private var hotelPayment:HotelPayment;
		private var roomCatagoryOfHotel_r1:RoomCategoriesOfHotel;
		private var roomCatagoryOfHotel_r2:RoomCategoriesOfHotel;
		private var roomCatagoryOfHotel_r3:RoomCategoriesOfHotel;
		
		private var roomCatagory_c1:RoomCategory;
		private var roomCatagory_c2:RoomCategory;
		private var roomCatagory_c3:RoomCategory;
		
		private var occupencyList:ArrayCollection;
		private var occupency_o1:OccupencyType;
		private var occupency_o2:OccupencyType;
		private var occupency_o3:OccupencyType;
		
		private var basisList:ArrayCollection;
		private var basis_b1:Basis;
		private var basis_b2:Basis;
		private var basis_b3:Basis;
		private var basis_b4:Basis;
		private var _tempRoomsCatagoriesOfHotelList:ArrayCollection = new ArrayCollection;//----------testing-------------------------
		private var roomRateList:ArrayCollection;
		private var selectedMarketRateIndentityUuid:String;
		private var selectedHotelUuid:String;
		private var selectedMarketUuid:String;
		private var hotelRateIdntityObj:HotelRatesIdentity;
		
		private var _app:JWTPopUp;
		[Bindable] public var args:NotificationArguments;
		
		//[Bindable] public var _loggedInUser:User;
		[Bindable] private var _selectedIndex:int = -1;
		[Bindable] private var selectedMarketRateIndex:int = -1;
		[Bindable] public var _hotelObj:Hotel = new Hotel();
		[Bindable] public var _hotellist:ArrayCollection;
		
		[Bindable] public var _hotelRatesObj:HotelRates = new HotelRates();
		[Bindable] public var _hotelRatesMarketsList:ArrayCollection;
		[Bindable] public var _hotelRateslist:ArrayCollection;
		
		[Bindable] public var _roomCatagoriesOfHotelObj:RoomCategoriesOfHotel = new RoomCategoriesOfHotel();
		[Bindable] public var _roomCatagoriesOfHotellist:ArrayCollection;
		
		[Bindable] public var _roomCatagoriesObj:RoomCategory = new RoomCategory();
		[Bindable] public var _roomCatagorieslist:ArrayCollection;
		[Bindable] public var _roomOccupationlist:ArrayCollection;
		[Bindable] public var _basislist:ArrayCollection;
		[Bindable] public var _hotelRatesCategoryObj:HotelRateCategory = new HotelRateCategory();
		[Bindable] public var _marketList:ArrayCollection;
		[Bindable] public var _rateIdentityObj:HotelRatesIdentity = new HotelRatesIdentity();
		[Bindable] public var _rateIdentityList:ArrayCollection;
		
		private const CONDITION_1:String = "fecthByMarketIdentity";
		
		public function TourHelperHotelMediator(view:UIComponent, args:NotificationArguments)
		{
			super(view);
			if(view != null)
			{
				_view  = view as TourHelperHotelView;
				_agents = new ArrayCollection();
			
			}
			if(args != null)
				this.args = args;
				
			_app = args.viewComponent as JWTPopUp;	
			
			if(_app != null)	
				_loggedInUser	= _app.args.user;	
		}
		
		protected override function viewComponentInitialize():void{
			initializeVariable();
			initializeHotelRatesRemortingObject();
			initializeHotelRatesIdentifyRemortingObject();
			
			//_view.test_button.addEventListener(MouseEvent.CLICK, showValues);
			_view.DG_Hotels.addEventListener(ListEvent.ITEM_CLICK, showSelectedItem);
			_view.T_search.addEventListener(KeyboardEvent.KEY_UP, dynamicSearch);
			_view.addEventListener(KeyboardEvent.KEY_UP, saveDocument);
			_view.CM_market.addEventListener(ListEvent.CHANGE, marketChanged);
			_view.DG_HotelsRates.addEventListener(ListEvent.ITEM_CLICK, showRates);
			
			//setInitialData();
			//generateDynamicObjects();
			//setRates();
			initializeHotelRemortingObject();
			initializeOccupationList();
			initializeBasisList();
			reloadHotelList();
			showRoomsCategory();
			loadMarketList();
			setLoggedInUser();
			
		}
		
		private function setLoggedInUser():void
		{
			HotelRatesRO.setLogedInUser(_loggedInUser);
			hotelRateIdentityRO.setLogedInUser(_loggedInUser);
			hotelRO.setLogedInUser(_loggedInUser);
		}
		
		//Popoup, save & close
		private function saveAndClose(collection:ArrayCollection):void
		{
			var obj:Object =  new Object;
				//args.argumentObject = collection;
				_app.dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
		}
		
		private function showSelectedItem(event:ListEvent):void
		{
			_selectedIndex 	 					= event.rowIndex;
			_hotelObj		 					= _hotellist.getItemAt(_selectedIndex) as Hotel;
			startShowingSelectedItem(_selectedIndex);
		}
		
		private function startShowingSelectedItem(index:int):void
		{
			_view.DG_HotelsRates.dataProvider 	= null;
			dynamicHotel						= new DynamicHotel();
			hotelRateIdntityObj					= new HotelRatesIdentity;
			
			_selectedIndex 	 					= index;
			_hotelObj		 					= _hotellist.getItemAt(_selectedIndex) as Hotel;
			
			dynamicHotel.hotel  				= _hotelObj;
			_view.T_search.text 				= _hotelObj.hotelName;
			selectedMarketRateIndentityUuid 	= "";
			selectedHotelUuid					= "";
			selectedMarketUuid					= "";
			setHotelUuid(_hotelObj.uuid);
			selectedMarketUuid					= (_view.CM_market.selectedItem as HotelRateCategory).uuid;
			
			showHotelRatesList(_hotelObj.uuid);
			showRoomsofHotel(_hotelObj.uuid);
			
		}
		
		private function setInitialData():void
		{
			var _tempRoomsCatagoriesOfHotelList:ArrayCollection = new ArrayCollection;
				_tempRoomsCatagoriesOfHotelList.addItem(roomCatagoryOfHotel_r1);
				_tempRoomsCatagoriesOfHotelList.addItem(roomCatagoryOfHotel_r2);
				_tempRoomsCatagoriesOfHotelList.addItem(roomCatagoryOfHotel_r3);
			
			var _tempCancelationList:ArrayCollection = new ArrayCollection;
				_tempCancelationList.addItem(hotelCancelation);
			
			dynamicHotel 						= new DynamicHotel;
			dynamicHotel.hotel 					= _hotelObj;
			dynamicHotel.cancelationPolicyList 	= _tempCancelationList;
			dynamicHotel.roomsOfHotelList		= _tempRoomsCatagoriesOfHotelList;
			
		}
		private function initializeVariable():void
		{
			//_loginUser			= (_args.viewComponent as MainView).user;	
			hotelRateIdntityObj	= new HotelRatesIdentity;
		}
		
		private function initializeOccupationList():void
		{
			initializeRoomOccupationRemortingObject();
			roomOccupationRO.dynamicSearch("","");
			
		}
		private function initializeBasisList():void
		{
			initializeBasisRemortingObject();
			basisRO.dynamicSearch("","");
			
		}
		public override function roomOccupationFetchResultsHandler(event:ResultEvent):void
		{
			
			_roomOccupationlist  		= new ArrayCollection();
			_roomOccupationlist			= event.result as ArrayCollection;
			//_view.DG_HotelsRates.dataProvider   = _roomOccupationlist;
		}
		public override function basisFetchResultsHandler(event:ResultEvent):void
		{
			
			_basislist  				= new ArrayCollection();
			_basislist					= event.result as ArrayCollection;
			//_view.DG_HotelsRates.dataProvider   = _roomOccupationlist;
		}
		
		private function generateDynamicObjects():void
		{
			var noOfRoomsTypes:int 		= dynamicHotel.roomsOfHotelList.length;
			var noOccupencyTypes:int 	= _roomOccupationlist.length; 
			var noBasisTypes:int		= _basislist.length;
			
			roomRateList				= new ArrayCollection;
			
			var periodFrom:DateField 	= new DateField;
			var periodTo:DateField 		= new DateField;
			var basisVbox:VBox 			= new VBox;

			basisVbox.addChild(new Label);
			basisVbox.addChild(new Label);
			
			_view.dynamicRateHBox.removeAllChildren();// remove rates text boxes and refresh when new item clicked
			// Loop through type of rooms, the hotel got
			for(var i:int =0; i< dynamicHotel.roomsOfHotelList.length; i++ )
			{
				var labelRoomCatagory:Label = new Label;
				labelRoomCatagory.text = (dynamicHotel.roomsOfHotelList.getItemAt(i) as RoomCategoriesOfHotel).roomCatagoryObj.description;
				labelRoomCatagory.setStyle("color", "#f9ac16");
				
				var outerFrame:VBox 			= new VBox;
				var innerFrameOfRoomType:HBox 	= new HBox;
				innerFrameOfRoomType.setStyle("backgroundColor", "#717368");
				
				outerFrame.addChild(labelRoomCatagory);
				outerFrame.setStyle("backgroundColor", "#3f3c35");
				
				for(var c:int =0; c< _roomOccupationlist.length; c++ )
				{
					var labelOccupancy:Label = new Label;
					labelOccupancy.text = (_roomOccupationlist.getItemAt(c) as OccupencyType).description;
					
					var innerFrameOfOccupancyType:VBox = new VBox;
					//innerFrameOfOccupancyType.setStyle("backgroundColor", "#5c644d");
					
					innerFrameOfOccupancyType.addChild(labelOccupancy);
					
					for(var x:int =0; x< _basislist.length; x++ )
					{
						var rateInputFeild:TextInput = new TextInput;
							rateInputFeild.width 	 = 35;
							
							rateInputFeild.editable;
						
						var roomsRequiredFeild:TextInput = new TextInput;
							roomsRequiredFeild.width 	 = 35;
							roomsRequiredFeild.setStyle("color", "#9d003b");
							roomsRequiredFeild.setStyle("fontWeight", "bold");
							roomsRequiredFeild.editable;
						
						/* var roomRateLabel:Label = new Label; */
						var roomRateLabel:TextInput = new TextInput;
							roomRateLabel.width 	= 35;
							roomRateLabel.editable	= false;
							roomRateLabel.setStyle("color", "#9d003b");
							roomRateLabel.setStyle("backgroundColor", "#BBD2A2");
							
						var rate:HotelRates 	= new HotelRates;
						//rate.enteredbyId		= _loginUser.uuid;
						//rate.authorisedbyId		= _loginUser.manager.uuid;
						rate.idhotel			= _hotelObj.uuid;
						
						// Business decsion changed //
						//rate.marketId			= _loginUser.market.uuid; //
						
						rate.marketId			= (_view.CM_market.selectedItem as HotelRateCategory).uuid;
						rate.periodFrom			= periodFrom.text;
						rate.periodTo			= periodTo.text;
						rate.rateBox			= rateInputFeild;
						rate.roomsRequiredBox	= roomsRequiredFeild;
						rate.rate				= rateInputFeild.text;
						//rate.rateLabel			= roomRateLabel;
						rate.rateLabel			= roomRateLabel;
						
						rate.rateLabel.text		= rate.rate;
						rate.roomCatagory		= dynamicHotel.roomsOfHotelList.getItemAt(i) as RoomCategoriesOfHotel;	
						rate.roomcategoryId		= rate.roomCatagory.idroomCategory;
						rate.roomBasis			= _basislist.getItemAt(x) as Basis;
						rate.roomBasisId		= rate.roomBasis.uuid;
						rate.roomOccupation		= _roomOccupationlist.getItemAt(c) as OccupencyType;
						rate.roomOccupationId	= rate.roomOccupation.uuid;
						
						roomRateList.addItem(rate);
						
						var lableBasis:Label = new Label;
						lableBasis.text 	 =(_basislist.getItemAt(x) as Basis).description;
						
						// This is there only to add basis lable ONCE to the grid
						if(i ==0 && c == 0)
							basisVbox.addChild(lableBasis);
						
						var hbox:HBox = new HBox;
							hbox.addChild(roomRateLabel);
							hbox.addChild(roomsRequiredFeild); 		
						
							hbox.setStyle("borderColor", "#554d3c");
							hbox.setStyle("backgroundColor", "#d8c98d");						
							innerFrameOfOccupancyType.addChild(hbox);
					}
					innerFrameOfRoomType.addChild(innerFrameOfOccupancyType);
				}
				outerFrame.addChild(innerFrameOfRoomType);
				
				_view.dynamicRateHBox.addChild(outerFrame);
			}
			
			_view.dynamicRateHBox.addChild(basisVbox);
			
			//Alert.show("objects:" + roomRateList.length.toString());
		}
		
			
		
		public function showHotelRatesList(hotelUuid:String) :void
		{
			//HotelRatesRO.dynamicSearch("uuid",FetchByIdhotel);
			//HotelRatesRO.dynamicSearch("RATES_BASED_ON_MARKET",FetchByIdhotel);
			HotelRatesRO.getMarketsOfRates("RATES_BASED_ON_MARKET",hotelUuid);
			
		}
		public function showRoomsofHotel(FetchByIdhotel:String) :void
		{
			initializeRoomCategoriesOfHotelRemortingObject();
			RoomCategoriesOfHotelRO.dynamicSearch("uuid",FetchByIdhotel);
		}
		public function showRoomsCategory() :void
		{
			initializeRoomCategoriesRemortingObject();
			RoomCategoriesRO.dynamicSearch("","");
		}
		//search Hotels
		private function dynamicSearch(event:KeyboardEvent):void
		{
			reloadHotelListforDynamic();
		}
		private function reloadHotelListforDynamic():void
		{
			if(_view.CB_name.selected == true)
				hotelRO.dynamicSearch("dynamicNameAllHotels",_view.T_search.text.toString());
			else if(_view.CB_location.selected == true)	
				hotelRO.dynamicSearch("dynamicLocations",_view.T_search.text.toString());
				
			//hotelRO.closeDBConnection();	
		}
//		private function setRates():void
//		{
//			var rate1:HotelRates = (roomRateList.getItemAt(3) as HotelRates);
//			rate1.rate.text = "57";
//		}
		
		private function reloadHotelList():void
		{
			hotelRO.dynamicSearch("dynamicNameAllHotels",_view.T_search.text.toString());
		}
		private function loadMarketList():void
		{
			initializeHotelRatesCategoryRemortingObject();
			hotelRateCategoryRO.dynamicSearch("","");
		}
		
		public override function hotelFetchResultsHandler(event:ResultEvent):void
		{
			_hotellist = event.result as ArrayCollection;
			_view.DG_Hotels.dataProvider = _hotellist;
			
			if(_selectedIndex != -1)
			{
				_view.DG_Hotels.selectedIndex = _selectedIndex;
			}
		}
		
		public override function roomCategoriesOfHotelFetchResultsHandler(event:ResultEvent):void
		{
			//Alert.show(_hotelObj.uuid + " : " +_hotelRatesObj.hotel.uuid);
			dynamicHotel		= new DynamicHotel();
			_roomCatagoriesOfHotellist  		= new ArrayCollection();
			_roomCatagoriesOfHotellist			= event.result as ArrayCollection;
			_tempRoomsCatagoriesOfHotelList     = _roomCatagoriesOfHotellist;
			
			dynamicHotel.roomsOfHotelList		= _tempRoomsCatagoriesOfHotelList;
			generateDynamicObjects();
			
		}
		public override function roomCategoriesFetchResultsHandler(event:ResultEvent):void
		{
			
			_roomCatagorieslist  				= new ArrayCollection();
			_roomCatagorieslist					= event.result as ArrayCollection;
//			_view.DG_HotelsRates.dataProvider   = _roomCatagorieslist;
		}
		public override function hotelRateCategoryFetchResultsHandler(event:ResultEvent):void
		{
			
			_marketList  				= new ArrayCollection();
			_marketList					= event.result as ArrayCollection;
			_view.CM_market.dataProvider= _marketList;
			
			_view.CM_market.selectedIndex = 1;
			setMarketDetails();
			
			if (selectedMarketRateIndex != -1)
				showingRates();
		}
		
//		private function fecthHotelRatesList() :void
//		{
//			initializeHotelRatesRemortingObject()
//			var _q:QuerryObject = new QuerryObject;
//			_q.condition1 = "";
//			_q.searchCode = RATESONMARKET;							
//			
//			HotelRatesRO.dynamicSearch(_q, _loginUser); 
//		}
		
		private function marketChanged(event:ListEvent):void
		{
			setMarketDetails();
			//generateDynamicObjects();
		}
		
		private function setMarketDetails():void
		{
			setIdMarket((_view.CM_market.selectedItem as HotelRateCategory).uuid);
			setIdMarketRateIndentity("");
			//generateDynamicObjects();
		}
		
		private function showRates(event:ListEvent):void
		{
			selectedMarketRateIndex 	= event.rowIndex;
			showingRates();
		}
		
		private function showingRates():void
		{
			generateDynamicObjects();
			
			_view.DG_HotelsRates.selectedIndex 	= selectedMarketRateIndex;
			hotelRateIdntityObj					= (_view.DG_HotelsRates.dataProvider as ArrayCollection).getItemAt(selectedMarketRateIndex) as HotelRatesIdentity;
			
			updateHotelRateMetaScreenDetails();
			
			HotelRatesRO.dynamicSearch(CONDITION_1, hotelRateIdntityObj.uuid );
		}
		
		public override function hotelRatesResultsHandler(event:ResultEvent):void
		{
			_hotelRateslist 					= new ArrayCollection();
			_hotelRateslist						= event.result as ArrayCollection;
			//Alert.show(_hotelRateslist.length.toString());
			
			updateRatesInputFeilds();
		}
		
		public override function hotelRatesMarketResultsHandler(event:ResultEvent):void
		{
			_hotelRatesMarketsList 				= new ArrayCollection();
			_hotelRatesMarketsList				= event.result as ArrayCollection;
			_view.DG_HotelsRates.dataProvider   = _hotelRatesMarketsList;
			
		}
		
		public function updateHotelRateMetaScreenDetails():void
		{
				_view.D_fromDate.text			= hotelRateIdntityObj.fromDate;
				_view.D_toDate.text				= hotelRateIdntityObj.toDate;
				_view.T_guide.text				= hotelRateIdntityObj.guidAccomodationObj.rate;
				_view.chk_taxIncluded.selected	= (hotelRateIdntityObj.taxIncluded == Constants.BOOLEAN_TRUE)? true: false;
				
				var htc:HotelRateCategory 		= new HotelRateCategory;
				htc.uuid 						= hotelRateIdntityObj.idMarket
				htc.description 				= hotelRateIdntityObj.marketName;
				
				selectedMarketRateIndentityUuid = hotelRateIdntityObj.uuid;
				selectedHotelUuid				= hotelRateIdntityObj.idHotel;
				selectedMarketUuid				= hotelRateIdntityObj.idMarket;
				
				var _tempCol:ArrayCollection = _view.CM_market.dataProvider as ArrayCollection;
				for(var o:int =0; o< _tempCol.length; o++)
				{
					if(htc.uuid == (_tempCol.getItemAt(o) as HotelRateCategory).uuid)
					{
						_view.CM_market.selectedIndex = o;
						break;
					}
				}
		}
		
		private function updateRatesInputFeilds():void
		{
			for(var i:int = 0; i<roomRateList.length; i++)
			{
				var _hotelRate:HotelRates = roomRateList.getItemAt(i) as HotelRates;
				for(var x:int = 0; x<_hotelRateslist.length; x++)
				{
					var _obj:HotelRates = _hotelRateslist.getItemAt(x) as HotelRates;
					if(	_hotelRate.roomBasisId 		== _obj.roomBasisId 		&& 
						_hotelRate.roomOccupationId == _obj.roomOccupationId 	&& 
						_hotelRate.roomcategoryId 	== _obj.roomcategoryId 	)
						{
							_hotelRate.uuid						= _obj.uuid;
							_hotelRate.idhotel					= _obj.idhotel;
							_hotelRate.rateLabel.text 			= _obj.rate;
							_hotelRate.rate	 					= _obj.rate;
							_hotelRate.hotelRatesIdentity.uuid	= selectedMarketRateIndentityUuid;
							_hotelRate.currencyId				= _obj.currencyId;
							_view.L_currencyCode.text			= _obj.currencyId;
							
							//Set style
							if(_hotelRate.rateBox.text != "")
								setInputBoxStyle(_hotelRate.rateBox);
							else
								reSetInputBoxStyle(_hotelRate.rateBox);
						}

				}
			}
		}
		
		private function setInputBoxStyle(box:TextInput):void
		{
			box.setStyle("backgroundColor","#eade9c");
		}
		
		private function reSetInputBoxStyle(box:TextInput):void
		{
			box.setStyle("backgroundColor","#ffffff");
		}
		
		public function saveDocument(event:KeyboardEvent):void
		{
			if(event.keyCode == 119)
				prepareToSaveRates();
			else if(event.keyCode == 120)
				Alert.show("TODO:Delete this record");
			else if(event.keyCode == 112)
				Alert.show("TODO:Show HELP page");
				
		}
		
		private function indicateDateFeildError():void
		{
			if(_view.D_fromDate.text == "")
					setFeildError(_view.D_fromDate, "red");
			if(_view.D_toDate.text == "")
					setFeildError(_view.D_toDate,  "red");
		}
		
		private function resetDateFeildError():void
		{
			if(_view.D_fromDate.text != "")
					setFeildError(_view.D_fromDate, "black");
			if(_view.D_toDate.text != "")
					setFeildError(_view.D_toDate,  "black");
		}
		
		private function setFeildError(uio:UIComponent, color:String):void
		{
			uio.setStyle("borderColor", color);
			uio.setStyle("borderColor", color);
		}
		
		private function prepareToSaveRates():void
		{
			if(_view.D_fromDate.text == "" || _view.D_toDate.text == "")
			{
				indicateDateFeildError();
						
			}else
			{
				resetDateFeildError();
				//Prepare the rateIdentityObject
				var rateIdentityObject:HotelRatesIdentity = new HotelRatesIdentity();
				rateIdentityObject.uuid 	= (selectedMarketRateIndentityUuid == "")? UIDUtil.createUID(): selectedMarketRateIndentityUuid;
				rateIdentityObject.idHotel	= selectedHotelUuid;
				rateIdentityObject.idMarket	= selectedMarketUuid;
				
				rateIdentityObject.guidAccomodationObj.rate	= _view.T_guide.text;
				
				rateIdentityObject.fromDate	= _view.D_fromDate.text;
				rateIdentityObject.toDate	= _view.D_toDate.text;
				
				// Prepare rates list
				var _temp:ArrayCollection = new ArrayCollection;
				var str:String = "";
				var rateInputFeild:TextInput = new TextInput;
							rateInputFeild.width = 45;
							rateInputFeild.setStyle("color", "#000000");
							rateInputFeild.editable;
				for(var i:int=0; i<roomRateList.length; i++)
				{
					var rate:HotelRates = (roomRateList.getItemAt(i) as HotelRates);
					//setRatesIdentity();
					//rate.idhotel				= _hotelObj.uuid;
					rate.rate					= rate.rateBox.text;
					rate.hotelRatesIdentity 	= rateIdentityObject;
					
					if(rate.roomsRequiredBox.text != "")
					{
						var obj:Object = new Object;
							obj.hotelRateUuid		= rate.uuid;
							obj.staticHotelRate		= rate.rateLabel.text;
							obj.noOfRoomsRequired	= rate.roomsRequiredBox.text;	
							obj.roomBasisId			= rate.roomBasisId;
							obj.roomCatagoryId		= rate.roomcategoryId;
							obj.roomOccupationId	= rate.roomOccupationId;
							obj.guideRate			= rate.hotelRatesIdentity.guidAccomodationObj.rate;
							obj.currencyUuid		= rate.currencyId;
							
							_temp.addItem(obj);
							setcostingDetails(rate, rate.roomsRequiredBox.text);
							//Fetch dditional detils
							addAditionalRoomRates(obj);
					}
				}
				var ratesIdentityList:ArrayCollection = new ArrayCollection;
				ratesIdentityList.addItem(rateIdentityObject);
				
				// TODO: Save records to DB
				//hotelRateIdentityRO.create(ratesIdentityList,_temp);
				
				//Close the popup
				saveAndClose(_temp);
			}
		}
		
		/** This method is to find and attach, SNG, DBL and TPL room basis
		 	This is used for PAX based calculations.
			Process FAILS, if multiple rooms are selected. **/
		private function addAditionalRoomRates(obj:Object):void
		{
			for(var i:int=0; i<_hotelRateslist.length; i++)
			{
				var _hotelRate:HotelRates = _hotelRateslist.getItemAt(i) as HotelRates;
				
				if(_hotelRate != null)
				{
					if( _hotelRate.roomcategoryId 	== obj.roomCatagoryId &&
						_hotelRate.roomBasisId 		== obj.roomBasisId)
						{
							if(_hotelRate.roomOccupationId == Constants.HOTEL_RATE_OCCUPANCY_SINGLE)
								obj.singleRate = _hotelRate.rate;
								
							if(_hotelRate.roomOccupationId == Constants.HOTEL_RATE_OCCUPANCY_DOUBLE)
								obj.doubleRate = _hotelRate.rate;
								
							if(_hotelRate.roomOccupationId == Constants.HOTEL_RATE_OCCUPANCY_TRIPLE)
								obj.tripleRate = _hotelRate.rate;	
								
						}
				}
			}
		}
		
		private function setRatesIdentity():void
		{
		_rateIdentityObj.uuid		= selectedMarketRateIndentityUuid;
		_rateIdentityObj.fromDate   = _view.D_fromDate.text;
		_rateIdentityObj.toDate     = _view.D_toDate.text;
		_rateIdentityObj.idMarket   = (_view.CM_market.selectedItem as HotelRateCategory).uuid;
		_rateIdentityObj.idHotel 	= _hotelObj.uuid;
		//hotelRate.hotelRatesIdentity= _rateIdentityObj;
		
		}
		private function setcostingDetails(_rate:HotelRates, _noOfRooms:String):void
		{
			var _obj:CostingHotelDetails = new CostingHotelDetails();
			_obj.uuid				= UIDUtil.createUID();
			//_obj.costingHotelUuid	= args.originatorObject.costingHotel.uuid;
			_obj.costingHotelUuid	= selectedHotelUuid
			_obj.noOfRooms 			= int(_noOfRooms);
			_obj.hotelRateUuid		= _rate.uuid;
			_obj.roomCategory		= _rate.roomCatagory.roomCatagoryObj.description;
			_obj.hotelName			= _hotelObj.hotelName;
			_obj.roomRate			= _rate.rateLabel.text;
			_obj.roomBasis			= _rate.roomBasis.description;
			_obj.occupancyBasis		= _rate.roomOccupation.description;	
			_obj.currencyUuid		= _rate.currencyId;	
			args.argumentObject = _obj;
		
		}
		private function setIdMarket(value:String):void
		{
			selectedMarketUuid = value;
		}
		
		private function setHotelUuid(value:String):void
		{
			selectedHotelUuid = value;
		}
		private function setIdMarketRateIndentity(value:String):void
		{
			selectedMarketRateIndentityUuid = value;
		}
		
		public override function hotelRatesIdentityCreateResultsHandler(event:ResultEvent):void
		{
			//Alert.show("done");
			if (_selectedIndex != -1)
				startShowingSelectedItem(_selectedIndex);
//			
//			if (selectedMarketRateIndex != -1)
//				showingRates();
		}
		public override function faultHandler(event:FaultEvent):void
		{
			Alert.show("failed\n"+event.message);
		}
		
	}
}